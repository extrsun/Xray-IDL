;+
; NAME:
;	GREY
; PURPOSE:
;	Plot grey scale image in normalized coordinates. Overlaid contours 
; can be obtained by calling cont_grey instead
;
; CATEGORY:
;	General graphics.
; CALLING SEQUENCE:
;	GREY, a
; INPUTS:
;	A = 2 dimensional array to display as a greyscale plot
;
; KEYWORD PARAMETERS:
;	/nx1,/nx2,/ny1,/ny2  = The coordinates of the lower left and the upper
;                            right coners of the image
;	/NOASPECT = set to retain image's dimension ratio.  Otherwise,
;	the image's aspec ratio is retained. Assumes square
;		pixels.  
;	/INTERP = set to bi-linear interpolate if image is resampled.
;       /COLORS = color desired for contour plot. 
;	rimage - if non zero, the grey scale will be generated with a
;	random generator (using plot_rimage). The value of rimage is used
;	as the maximum expected number points per pixel
;
;	pscolor - a keyword if set indicates a color postscript file is to
;		be produced.
;	barshiftx, barshifty, barfactor - the x and y shifts (in normalized
;	coordinates) and multiple size factor of the color bar (default=1;
;	the same linear size as the figure). These three parameters are
;	used to locate the bar in the figure.
;	ntoppix - the number of top color indexes in the color table
;	used for other purposes (e.g., drawing  the frame of the figure)
;	If the original color table is expanded to more levels (because
;	of device differences), ntoppix may need to be increased accordingly.
;	noscale - if set, the image is not scaled by bscale.
;
; OUTPUTS:
;	No explicit outputs.
; COMMON BLOCKS:
;	none.
; SIDE EFFECTS:
;	The currently selected display is affected.
; RESTRICTIONS:
;	None that are obvious.
; PROCEDURE:
;       Use normalized coordinates instead of device coordinates
;	the plot window.
; SUBROUTINES CALLED:
; 	bscale,index_conv
; MODIFICATION HISTORY:
;     writen on Aug 19 1992 (WQD) 
; 	add the option to use the random number generator for a better
;	look of an image, Aug. 1993 (wqd)
; added keywords, pscolor, for a color postscript file
; keywords: barshiftx, barshifty, barfactor are added 
; wqd, Jan 7, 1994
;-
pro grey, aa, NOASPECT = noaspect, INTERP = interp, COLORS  = colors, device=device,rimage=rimage,greymin=greymin,greymax=greymax,greylog=greylog,xbar=xbar,pscolor=pscolor,noerase=noerase,corner=corner,barshiftx=barshiftx,barshifty=barshifty,barfactor=barfactor,ntoppix=ntoppix,nbotpix=nbotpix,noimage=noimage,b_c=b_c,noscale=noscale,nocont=nocont,true=true
common colors,r_orig,g_orig,b_orig,r_curr,g_curr,b_curr
;
if (n_params() eq 0) then begin
print,' grey, aa,noaspect,interp,colors,device,rimage'
print,',greymin,greymax,greylog,xbar,pscolor,noerase,corner'
print,',barshiftx,barshifty,barfactor,ntoppix,nbotpix,b_c,noimage,noscale,true]'
Return
endif
;

; set background color if keyword b_c is given
if n_elements(b_c) ne 0 then begin
	polyfill,[0,1,1,0],[0.,0.,1,1],color=b_c,/norm
	noerase=1
endif
a=aa
if n_elements(greylog) eq 0 then greylog=0
if greylog eq 1 then a=alog10(a > 1.e-10)
if greylog eq 2 then a=sqrt(a > 1.e-10)

if n_elements(greymin) eq 0 then begin 
	greyminn=min(a)
endif else begin
	case greylog of
		1: greyminn=alog10(greymin)
		2: greyminn=sqrt(greymin)
		else: greyminn=greymin
	endcase
	c=where(a ne 0,nc)
	if n_elements(nc) ne 0 then a(c)=a(c) > greyminn 
endelse
if n_elements(greymax) eq 0 then begin 
	greymaxn=max(a)
endif else begin
	case greylog of
		1: greymaxn=alog10(greymax)
		2: greymaxn=sqrt(greymax)
		else: greymaxn=greymax
	endcase
	a=a < greymaxn
endelse
if n_elements(corner) eq 0 then corner=[0.,1.,0.,1.] else corner=double(corner)
;nx1=corner(0) & nx2=corner(1)  ;could be overruled if noaspect is not set
;nx3=corner(2) & nx4=corner(3)  ;could be overruled if noaspect is not set
if keyword_set(device) ne 0 then begin
	dname=!d.name
	set_plot,device
	device,/color
endif
if n_elements(ntoppix) eq 0 then ntoppix=1 
	;reserved the highest pixel value for other uses (e.g., contours)
if n_elements(nbotpix) eq 0 then nbotpix=1 ;to make the background not white
;
;on_error,2                      ;Return to caller if an error occurs
sz = size(a)			;Size of image
if sz(0) lt 2 then message, 'Parameter not 2D'
;  
colorsav = !color               ;save colors to restore later
mx = !d.n_colors-1		;Brightest color
if (!d.name ne 'PS' or keyword_set(pscolor) ne 0) $
	and n_elements(r_curr) ne 0 then begin
	tvlct,r_orig,g_orig,b_orig
endif else begin
	colors=indgen(!d.n_colors-ntoppix) 
	tvlct,colors,colors,colors
;	loadct_self,14
endelse
contour,[[0,0],[1,1]],/nodata, xstyle=4, ystyle = 4,noerase=noerase
;
swx=(corner(1)-corner(0))*!d.x_vsize        
swy=(corner(3)-corner(2))*!d.y_vsize
dxa=corner(0)*!d.x_vsize
dya=corner(2)*!d.y_vsize
six = float(sz(1))		;Image sizes
siy = float(sz(2))
aspi = six / siy		;Image aspect ratio
aspw = float(swx) / swy		;Window aspect ratio
f = aspi / aspw			;Ratio of aspect ratios
 ;
  if keyword_set(noaspect) ne 1 then begin	;Retain aspect ratio?
				;Adjust window size
	if f ge 1.0 then swy = swy / f else swx = swx * f
    endif
corner(1)=corner(0)+swx/!d.x_size
corner(3)=corner(2)+swy/!d.y_size
if not keyword_set(noscale) then $
	aaa=bscale(a,greyminn,greymaxn,ntoppix=ntoppix,nbotpix=nbotpix) $
	else aaa=a
if keyword_set(noimage) ne 0 then return
if n_elements(rimage) ne 0 then begin
	plot_rimage,aaa*(rimage/238.),corner
	goto,done
endif

if (!d.flags and 1) ne 0 then begin	;Scalable pixels?
  	if !d.name eq 'PS' and keyword_set(pscolor) eq 0 then begin
;	 if keyword_set(true) eq 0 then begin
		tv,!d.n_colors-ntoppix-aaa,dxa,dya, $
		xsize = swx, ysize = swy, /device,true=true
	endif else begin
		tv,aaa,dxa,dya,xsize = swx, ysize = swy, /device,true=true
	endelse
endif else begin	;Not scalable pixels	
	if not keyword_set(true) then begin
		tv,poly_2d(aaa, $
		[[0,0],[six/swx,0]], [[0,siy/swy],[0,0]], $
		keyword_set(interp),swx,swy),dxa,dya,true=true
	endif else begin
		if abs(six-swx)+abs(siy-swy) gt 0.5 then begin
			ccc=poly_2d(aaa(*,*,0), $
			[[0,0],[six/swx,0]], [[0,siy/swy],[0,0]], $
			keyword_set(interp),swx,swy)
			sz=size(ccc)
			bbb=fltarr(sz(1),sz(2),3)
			bbb(*,*,0)=ccc
			for kk=1,2 do bbb(*,*,kk)=poly_2d(aaa(*,*,kk), $
			[[0,0],[six/swx,0]], [[0,siy/swy],[0,0]], $
			keyword_set(interp),swx,swy)
			aaa=bbb
		endif
		tv,aaa,dxa,dya,xsize = swx, ysize = swy, /device,true=true
	endelse
endelse		
if n_elements(barshiftx) eq 0 then barshiftx=0.02
if n_elements(barshifty) eq 0 then barshifty=0
if n_elements(barfactor) eq 0 then barfactor=1.
if barfactor ne 0 then begin ; get the color bar
  bsx=barshiftx*!d.x_size
  bsy=barshifty*!d.x_size

  ;nbin=!d.n_colors-(ntoppix+nbotpix)
  nbin=256-(ntoppix+nbotpix)
  if !d.name eq 'PS' then begin
    if n_elements(xbar) ne 0 then begin
      index_conv,lindgen((nbin)*20) $
        ,[nbin,20],index
      index=index+nbotpix
      bar=fltarr(nbin,20)
      if keyword_set(pscolor) eq 0 then $
        bar(*)=(nbin-index(0,*)) else $
          bar(*)=index(0,*)
      tv,bar,bsx+dxa,bsy+2+dya+swy,xsize =barfactor*swx, ysize = 0.05*swy, $
        /device 
    endif else begin
      index_conv,indgen((nbin)*20) $
        ,[20,nbin],index
      index=index+nbotpix
      bar=fltarr(20,nbin)
      if keyword_set(pscolor) eq 0 then $
        bar(*)=(nbin-index(1,*)) else $
          bar(*)=index(1,*)
      tv,bar,bsx+dxa+swx,bsy+dya+2,xsize =0.05*swx, ysize =barfactor*swy,$
        /device 
    endelse
  endif else begin
    if n_elements(xbar) ne 0 then begin
      iswx=fix(swx*barfactor)
      factor=(nbin)/(swx)
      index_conv,lindgen(iswx*20),[iswx,20],index
      bar=fltarr(iswx,20)
      bar(*)=index(0,*)*factor+nbotpix
      tv,bar,bsx+dxa,bsy+2+dya+swy
    endif else begin
      iswy=fix(swy*barfactor)
      factor=(nbin)/(swy)
      index_conv,lindgen(iswy*20L),[20,iswy],index
      bar=fltarr(20,iswy)
      bar(*)=index(1,*)*factor+nbotpix
      tv,bar,bsx+2+dxa+swx,bsy+dya
    endelse
  endelse
endif
	
;
done:
;!color = colorsav
if keyword_set(device) ne 0 then begin
	device,/close
	set_plot,dname
endif
if !debug eq 2 then stop
return
end
