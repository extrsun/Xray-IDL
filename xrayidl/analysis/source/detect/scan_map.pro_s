;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+
;*NAME:
; scan_map
;
;*PURPOSE:
; scan sources through an image with an input background map
;
;*CALLING SEQUENCE:
; scan_map,cra,cdec,array_c,array_b,array_t,xoff,yoff,block=block 
;,outr=outr,inr=inr,threshold=threshold,outfile=outfile 
;,ssr=ssr,fac_ssr=fac_ssr,sigma_a=sigma_a,cntr_a=cntr_a,in_sigma=in_sigma 
;,sfrac=sfrac,append=append,ebmap=ebmap,sr=sr,psffile=psffile
; ,blow=blow,bhigh=bhigh,spfile=spfile
;
;*PARAMETERS:
;*INPUTS:
; cra, cdec - the ra and dec of the image center (deg)
; array_c, array_t, and array_b - counts, exposure, and background images
; xoff, yoff - offset of the image center from the axis (aiming point)
;		needed for ACIS observations
; block - the bin size of the image in units of !pixel_size (def=!block)
; inr, outr - the inner and outer radii (in units of arcmin) of the region
; 	(relative to the center) within which 
;	   the program is going to make the source analysis
;	(def = 54 arcmin). Annulus_out is cut to make sure sources within
;	the images are to be analyzed. But the region should be
;	smaller than that of the image.
; threshold - the lower limit of the signal-to-noise ratio of a peak which
;	is considered to be a source candidate (def = !threshold)
; outfile - the output source file name. if file='no', there will be no 
; 	output file
; sfrac - the source energy-enclosed fraction for the source searching for the 
;	local maxima of signal-to-noise ratios. (def = 90% PSF radius)
; sr - input source search radius
; ssr - source search radius, def = core_size of the (90%) radius of a source
; fac_ssr - choose a fraction of ssr (normally only for testing)
; append - if set, the output source list will be appended to the existing
;	file (def = 'sou_map'+strtrim(blow,2)+strtrim(bhigh,2))
; in_sigma - if given, input sigma_a will be used for source searching
; ebmap - error map for the background map, supplied with in_sigma
; psffile - psf file to be used (def may be specified in psf_param.pro)
;*OUTPUTS:
; sigma_a, cntr_a - the s/var(s) and count rate images which can be
;	reused, for example, for searching sources with a different fac_ssr.
;
;*PROCEDURE
; The standard map detection, but with pixel-dependent PSF.
;
;*EXAMPLES:
; scan_map,cra,cdec,cb,cbm*tb,tb,block=block,outr=54
; ,outf='t4.dat',perc=0.5,sigma=s,cntr=c,/in_si 
;
;*RESTRICTIONS:
; The radius for the source analysis should be smaller than the half size
; of the image minus the annulus_out at the radius
;
;*NOTES:
; The source detection parameters are presented in the procedure psf_params.
; !threshod is used as a system variable
;
; When the psf is smaller than the bin size, the count rate can be greatly
; overestimated by a factor of up to 1./sfrac.
; 
;*SUBROUTINES CALLED:
; get_sigma_map
; star_search_map
; psf_params
;
;*MODIFICATION HISTORY:
; writen April 21, 1996 (WQD) 
; modified for using psf_params. wqd, 6/2/2001
;
;-
;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
pro scan_map,cra,cdec,array_c,array_b,array_t,xoff,yoff,block=block $
,outr=outr,inr=inr,threshold=threshold,outfile=outfile $
,ssr=ssr,fac_ssr=fac_ssr,sigma_a=sigma_a,cntr_a=cntr_a,in_sigma=in_sigma $
,sfrac=sfrac,append=append,ebmap=ebmap,sr=sr,psffile=psffile,blow=blow,bhigh=bhigh,spfile=spfile
;
if n_params() eq 0 then begin
print,'CALLLING SEQUENCE - scan_map,cra,cdec,array_c,array_b,array_t'
print,',xoff,yoff,block=block,outr=outr,inr=inr,threshold=threshold'
print,',outfile=outfile,ssr=ssr,fac_ssr=fac_ssr,sigma_a=sigma_a'
print,',cntr_a=cntr_a,in_sigma=in_sigma,sfrac=sfrac,append=append,ebmap=ebmap,sr=sr'
return
endif
;
if n_elements(threshold) eq 0 then threshold=2.5
if n_elements(block) eq 0 then block=!block

if n_elements(outr) eq 0 then outr=54. ;arcmin. The actual search area is
					; outr+ssr 
if n_elements(inr) eq 0 then inr=0. ;arcmin
;
if n_elements(outfile) eq 0 then outfile='sou_map' 
if strupcase(outfile) ne 'NONE' then begin
	if keyword_set(append) eq 0 then $
	openw,un,outfile,/get_lun else $
	openw,un,outfile,/get_lun,/append
endif

; get bins to be search for sources
sz=size(array_c)
hdimx=(sz(1)-1.)*0.5 ; IDL image center coodinates
hdimy=(sz(2)-1.)*0.5
loc=lindgen(sz(1),sz(2))
i=loc mod sz(1)
j=loc/sz(1)
dis=sqrt((i-hdimx)^2+(j-hdimy)^2)*(block*!size_pixel/60.)
bin_sel=where(array_t gt 0. and dis le outr and dis ge inr,ns)
if ns eq 0 then stop,'stop: no source within the radius'

if n_elements(xoff) eq 0 then begin
	if !instr eq 'aciss' or !instr eq 'acisi' then begin
		print,'You need to give xoff and yoff for ACIS observations!' 
		return
	endif 
	dis=dis(bin_sel)
endif else begin
	dis=sqrt((i(bin_sel)-(hdimx-xoff/block))^2 $
	 +(j(bin_sel)-(hdimy-yoff/block))^2)*(block*!size_pixel/60.)
endelse

; get source sizes 
if n_elements(sr) eq 0 then begin
	psf_params,dis,rs,perclimit=sfrac,psffile=psffile,blow=blow,bhigh=bhigh,spfile=spfile
	rs = rs /block > 1. ;>1 to avoid the pixeling effect
endif else rs=dis*0.+sr
;
if keyword_set(in_sigma) eq 0 then $ ;otherwise use input sigma_a and cntr_a
	get_sigma_map, array_c,array_b,array_t,sigma_a,cntr_a, $
	core_size=rs,sfrac=sfrac,bin_sel=bin_sel,ebmap=ebmap
;rs and bin_sel can be changed by get_sigma_map

if n_elements(fac_ssr) eq 0 then fac_ssr=1.
if n_elements(ssr) eq 0 then ssr=fac_ssr*rs else $
	ssr=rs*0.+ssr ;to be a vector

; find the sources corresponding the local sigma maxima in the field
star_search_map,sigma_a,cntr_a,ssr,ns,threshold=threshold $
 	,x_core,y_core,source_sn,cntr,bin_sel=bin_sel

if n_elements(x_core) eq 0 then return
ssr=ssr*(block*!size_pixel) ;now ssr is only for the detected sources

;get position in a standard SASS image
ra_dist = float(x_core) - hdimx
dec_dist =float(y_core) - hdimy

trans_loct,ra_dist,dec_dist,cra,cdec,star_ra,star_dec,/deg $
	,pixsize=float(block)*!size_pixel

;convert the RA and DEC into unit of hour, degree:

trans_degree,star_ra,star_dec,ra_hour, $
 ra_min,ra_sec,dec_deg,dec_min,dec_sec,/deg
;recalculate the off-axis distances
;trans_dist,cra,cdec,star_ra,star_dec,xp,yp,/deg,pixsize=60.
;dis=sqrt(xp^2+yp^2) ;off image center distance (arcmin),
dis=sqrt(ra_dist^2+dec_dist^2)*(block*!size_pixel/60.) 
	;off image center distance (arcmin),
	;may be different from the off-axis distance

;record these source into output file:
newstar=indgen(ns)+1
for k=0,(ns-1) do begin
 	print, newstar(k), ra_hour(k),ra_min(k),ra_sec(k) $
 	,dec_deg(k),dec_min(k),dec_sec(k),source_sn(k),cntr(k) $
 	,dis(k),ssr(k),format='(I4, 2(2i4, f7.2), f9.2, f11.5,2f9.2)'
	if strupcase(outfile) ne 'NO' then $
 	  printf,un, newstar(k),' |', ra_hour(k),ra_min(k) $
	  ,ra_sec(k),' |',dec_deg(k),dec_min(k),dec_sec(k),' |',source_sn(k), $
   	  ' |',cntr(k),' |', dis(k),' |',ssr(k),' |' $
	  ,format='(I4,a2,2(2i4, f7.2,a2), f9.2,a2, f11.5,a2,2(f9.2,a2))'
endfor
if strupcase(outfile) ne 'NONE' then free_lun,un
return
end