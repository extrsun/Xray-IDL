pro cast,infile,outhead,outfile,outarr=outarr,inarr=inarr,inhead=inhead $
,nointerp=nointerp,gc=gc,offset=offset,roll=roll,psum=psum
;+
; program to cast an image into a new image characterized by the header 
;	outhead
; note: The pixel size of the new image should be equal to, or smaller than,
; that of the input image so that the interpretation will be meaningful
;
;    Inputs:   infile - input image.
;              outhead - output file containg specifics about the 
;		new image, i.e., x and y size, reference pixel, pixel size
;		center coordinates, and equinox, 
;		which can be produced by get_fitshead
;	       outfile - selected output of the output filename
;
;    Keywords: outarr  - output image array 
;		inarr - input image array (if set, infile will not
;			be used)
;              inhead - FITS header for input image (if set, infile will not
;			be used)
;		gc - if =1, the input file in an Aitoff projection 
;			centered at (l, b)=(0, 0) to the Ra and Dec projection
;			if = 2, the input file in the regular galactic 
;			projection, similar to that of Ra and Dec, to the
;			same Ra and Dec  coordinates
;			if =3, the input file in the Ra and Dec projection
;			into Galactic project.
; psum - if set, pixel size area will be normalized as in a
;        backgrround count image
;
; offset - if the reference pixel of inhead is not in FORTRAN formation,
;	offset needs to be set (e.g., (e.g., my old IDL format; 
;	1024 for xdim=2048; offset =0)
;	default=1 (FORTRAN format)
;		nointerp - if set, no interplation will be performed.
;
; writen by wqd, May 31, 1994
; the aitoff projection is added, 6/18/97
; regular galactic projection is added. 7/21/98
;-
;
if n_params() eq 0 then begin
	print,'CALLING SEQUENCE - cast,infile,outhead,outfile'
	print,',outarr=outarr,inarr=inarr,inhead=inhead,offset=offset'
	print,',nointerp=nointerp,gc=gc,roll=roll,psum=psum'
	return
endif
;
if n_elements(gc) eq 0 then gc=0
get_headinfo,outhead,xsize,ysize,cra,cdec,cpx,cpy,delx,dely,equi=equi,n3d=3 
		;force the input image to be a 2-D image 

if equi eq 0 then equi=2000
;read,'please give the equinox of the output file',equi
if abs(delx) ne dely then print,'delx ne dely'
pixel=0.5*(abs(dely)+abs(delx))
if n_elements(inhead) eq 0 then inhead=headfits(infile)
get_headinfo,inhead,xsin,ysin,crain,cdecin,cpxin,cpyin,delxin,delyin $
	,equi=equiin,blank=blank,n3d=3 
if (abs(delxin)-delyin) gt 1.e-6*delyin then print,'delxin ne delyin'
pixelin=delyin
if equiin eq 0 then equiin=2000 
;read,'please give the equinox of the intput file',equiin
outarr = fltarr(xsize,ysize)
;----------------------------------------------------
; To see if the field overlaps with the input image:
if (abs(xsin*0.5-cpxin+0.5)+abs(ysin*0.5-cpyin+0.5)) lt 1 then begin
	;the output has the reference pixel at the center
	imradius=cpxin*sqrt(2.)
case gc of 
 1: galtoait,cra,cdec,xx,yy,xlon0=crain,pixsize=pixelin 
 2: begin 
	glactc,cra,cdec,equi,ra2,dec2,1,/deg
	trans_dist,crain,cdecin,ra2,dec2,xx,yy,pixsize=pixelin*3600.,/deg
	;the central coodinate of the existing image (crain,cdecin) is 
	; supposed to be in galactic coordinates.
    end
 3: begin 
	glactc,ra2,dec2,equiin,cra,cdec,2,/deg
	trans_dist,crain,cdecin,ra2,dec2,xx,yy,pixsize=pixelin*3600.,/deg
	;the central coodinate of the existing image (crain,cdecin) is 
	; supposed to be in Ra and Dec
    end
 else: begin
	if equiin ne equi then sprecess,cra,cdec,equi,equiin
	trans_dist,crain,cdecin,cra,cdec,xx,yy,pixsize=pixelin*3600.,/deg
	end
endcase
pixr=pixelin/double(pixel)
;xmin=cpxin-0.5+xx-cpx+0.5)*pixr & xmax=cpxin-0.5+xx+(xsize-cpx+0.5)*pixr
;ymin=cpyin-0.5+yy-(cpy-0.5)*pixr & ymax=cpyin-0.5+yy+(ysize-cpy+0.5)*pixr
;xmin=cpxin-0.5+xx-imradius*pixr & xmax=cpxin-0.5+xx+imradius*pixr 
;ymin=cpyin-0.5+yy-imradius*pixr & ymax=cpyin-0.5+yy+imradius*pixr
xmin=cpx-0.5-xx-imradius*pixr & xmax=cpx-0.5-xx+imradius*pixr 
ymin=cpy-0.5-yy-imradius*pixr & ymax=cpy-0.5-yy+imradius*pixr
if (xmin gt xsize or xmax lt 0 or ymin gt ysize or ymax lt 0) then return
endif 
;-----------------------------------------------------
num=xsize*ysize
index_conv,lindgen(num),[xsize,ysize],indexv
if n_elements(offset) eq 0 then offset=1
xx = indexv(0,*) - (cpx-offset) 
yy = indexv(1,*) - (cpy-offset) ;from the array edge.

if n_elements(roll) ne 0 then rot_xy,xx,yy,roll,block=1,xpref=0,ypref=0
trans_loct,xx,yy,cra,cdec,ra,dec,pixsize=pixel*3600.,/deg
;
; determine the locations in the input image
case gc of 
 1: galtoait,ra,dec,xx,yy,xlon0=crain,pixsize=pixelin 
 2: begin 
	glactc,ra,dec,equi,ra2,dec2,1,/deg
	trans_dist,crain,cdecin,ra2,dec2,xx,yy,pixsize=pixelin*3600.,/deg
	;the central coodinate of the existing image (crain,cdecin) is 
	; supposed to be in galactic coordinates.
    end
 3: begin 
	glactc,ra2,dec2,equiin,ra,dec,2,/deg
	trans_dist,crain,cdecin,ra2,dec2,xx,yy,pixsize=pixelin*3600.,/deg
	;the central coodinate of the existing image (crain,cdecin) is 
	; supposed to be in Ra and Dec
    end
 else: begin
	if equiin ne equi then sprecess,ra,dec,equi,equiin
	trans_dist,crain,cdecin,ra,dec,xx,yy,pixsize=pixelin*3600.,/deg
	end
endcase
;
;
if n_elements(inarr) eq 0 then inarr = readfits(infile,silent=1) 
xx=xx+(cpxin-offset)
yy=yy+(cpyin-offset)
mm  = where( (xx lt xsin) and (xx ge 0) and $
             (yy lt ysin) and (yy ge 0) and inarr(xx,yy) ne blank, count)
if count ne 0 then begin
	if keyword_set(nointerp) then begin
		xx=nint(xx)
		yy=nint(yy)
		outarr(mm)=inarr(xx(mm),yy(mm)) 
	endif else begin
		outarr(mm) = interpolate(inarr,xx(mm),yy(mm))
	endelse
endif else begin
   stop,'!!! No correspondence found between the images !!!'
if !debug eq 1 then stop
	return
endelse
;
index = where( finite(outarr) eq 0 , count)
if count ne 0 then outarr(index)=blank
mx = max(outarr(where(outarr ne blank)), min = mn)
;
;
sxaddpar,outhead,'datamax',mx
sxaddpar,outhead,'datamin',mn
if keyword_set(psum) then outarr=outarr*(pixel/pixelin)^2
if n_elements(outfile) ne 0 then writefits,outfile,outarr,outhead
;
end
