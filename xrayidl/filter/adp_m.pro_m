pro adp_m,ima,expta,ims,imas,mexpt=mexpt,filter=filter,gslo=gslo,gstep=gstep,gshi=gshi,ftonth=ftonth,bch=bch,nonorm=nonorm,gsimsz=gsimsz,nimax=nimax
;+
; perform an adaptive gaussian smooth of images
;
;*CALLING SEQUENCE:
; adp_m,im,ims,ima,imas,expt=expt,sexpt=sexpt,mexpt=mexpt,filter=filter
; ,gslo=gslo,gstep=gstep,gshi=gshi,ftonth=ftonth,bch=bch,nonorm=nonorm
; ,gsimsz=gsimsz,nimax=nimax
;*PARAMETERS:
; INPUTS:
; im - input count image for smoothing
;	
; OUTPUTS:
; ims - smoothed image
;
;*OPTIONAL IMPUTS or OUTPUTS:
; expt - the exposure of the input image. If supplied, the
;              output is the flux image mutiplied by mexpt
; mexpt - the maximum value of expt
; sexpt - smoothed expt
; ima - stack of additional images (e.g., background or images in other bands)
;       to be smoothed in the exact same way as im
; imas - stack of the smoothed ima
; filter - image for selecting pixels in the smoothing
;          calculation. only pixels > 0 are chosen.
; gslo - the initial size of the Gaussian FWHM (def=1 pixel)
; gstep - fractional step of the Gaussian size increase (def = 0.02)
; gshi - the maximum Gaussian size before stopping (def=sz(1) < sz(2))
; ftonth - the flux-to-noise ratio lower limit  for the smoothing
; bch - choice for background estimate during the flux to noise
;             ratio calculation. (def =0). If =1, the flux is the net
;             flux above the median flux value of the remaining pixels
; gsimsz   - gaussian image size in units of bins (def=min(sz(1:2)))
; nimax - the maximum number of smoothing steps (def=1000)
;
;*RESTRICTIONS:
;
;*NOTES:
;
;*SUBROUTINES CALLED:
;   covolve
;   gsf_gaussian
;
;*MODIFICATION HISTORY:
;    written  by wqd, May 27, 2003
;-
;------------------------------------------------------------------------------
np=n_params ()
if np eq 0 then begin
print,'Calling SEQ - adp_m,im,ims,ima,imas,expt=expt,sexpt=sexpt,mexpt=mexpt'
print,',filter=filter,gslo=gslo,gstep=gstep,gshi=gshi,ftonth=ftonth,bch=bch'
print,',nonorm=nonorm,gsimsz=gsimsz,nimax=nimax'
return
endif

if n_elements(bch) eq 0 then bch=1
if n_elements(nimax) eq 0 then nimax=1000
if n_elements(ftonth) eq 0 then ftonth=3
if n_elements(gstep) eq 0 then gstep=0.02
if n_elements(gslo) eq 0 then gslo=1.
sz=size(ima)
if n_elements(gshi) eq 0 then gshi=min(sz(1:2))
if n_elements(gsimsz) eq 0 then gsimsz=sz(1) < sz(2)
minc = 1.e-10 ;minimum number of counts for calculating Poisson error

mexpt=max(expta)
exptn=expta/mexpt
;if additional maps are to be smoothed
sza=size(ima)
if sza(0) eq 2 then nima=1 else if sza(0) eq 3 then nima=sza(3) else begin
    print,'ima must be a 2-D or 3-D array!'
    return
endelse
fluxa=expta*0.
for k=0,nima-1 do begin
    fluxa(*,*,k)=imdiv(ima(*,*,k),exptn(*,*,k))
endfor 

;if the filter is supplied
nfilter=n_elements(filter)
if nfilter eq 0 then begin
    nsel=sza(1)*sza(2)
    sel=lindgen(nsel) 
endif else begin
    sel=where(filter gt 0,nsel)
    imagea_sel,sel,fluxa
    imagea_sel,sel,exptn
endelse

ims=fltarr(sza(1),sza(2))
efluxs=ims
fluxac=exptn*0.
sfluxa=fluxac
sfluxeac=fluxac
ni=0
binsize=gslo
nselo=nsel
ncc=0
fluxao=fluxa
fluxaoc=exptn*0.
while ni lt nimax and binsize lt gshi do begin
    print,'ni, binsize,nsel = ',ni,binsize,nsel
     wlimg=psf_gaussian(nd=2,fwhm=binsize,np=gsimsz,/norm)
     for k=0,nima-1 do begin
         fluxac(*,*,k)=convolve(fluxa(*,*,k),wlimg) 
         fluxaoc(*,*,k)=convolve(fluxao(*,*,k),wlimg) 
         sfluxeac(*,*,k)=convolve(imdiv(fluxac(*,*,k),exptn(*,*,k)),wlimg^2) 
     endfor

     fluxc=total(fluxac,3)
     imssigma=sqrt(total(sfluxeac,3)  > minc)
     if bch eq 0 then fton=imdiv(fluxc,imssigma) else $
       fton=imdiv(fluxc-median(fluxc(sel)), imssigma)
     
     c=where(fton(sel) gt ftonth,nc)
     if nc ne 0 then begin
         selc=sel(c)
         ims(selc)=fluxc(selc)
         efluxs(selc)=imssigma(selc)
         imagea_sel,selc,fluxac,sfluxa
         if nc eq nsel then goto,done
;imagea_sel,sel,fluxa
;imagea_sel,sel,exptn
         remove,c,sel
         nsel=nsel-nc
         if ncc eq 0 then begin
             ncc=1
             cc=selc 
         endif else cc=[cc,selc]
         imagea_sel,cc,fluxaoc,fluxa
     endif
     ni=ni+1
     binsize=binsize*(1.+gstep)
     if !debug eq 1 then stop
     if nsel lt nselo*0.05 then goto,done
endwhile
done:

;for the rest of the image, set to the current values
; and normalize the smoothed image value to avoid any intensity shift
ims(sel)=fluxc(sel) & efluxs(sel)=imssigma(sel)
imagea_sel,sel,fluxac,sfluxa
stop
return
end
